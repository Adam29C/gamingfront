{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// // import { DispatchLogin } from \"../../../Layout/Auth/Login\";\nimport { LOGIN } from \"../../../Service/auth.service\";\nexport const Login = createAsyncThunk(\"auth/login\", async data => {\n  const {\n    user_id,\n    token\n  } = data;\n  try {\n    const res = await LOGIN({\n      _id: user_id\n    }, token);\n    return await res;\n  } catch (err) {\n    return err;\n  }\n});\n\n// const AuthSlice = createSlice({\n//   name: \"AuthSlice\",\n//   initialState: {\n//     isLoading: false,\n//     isError: false,\n//     helps: [],\n//     status: false,\n//   },\n\n//   recuders: {},\n//     extraReducers: {\n//       [Login.pending]: (state, { payload }) => {\n//         // state.isLoading = false;\n//         // return { ...state, get_dashboard: [], isLoading: true };\n//       },\n//       [Login.fulfilled]: (state, { payload }) => {\n//         // state.isLoading = false;\n//         return { ...state, helps: payload, isLoading: false };\n//       },\n//       [Login.rejected]: (state, action) => {\n//         // return { ...state, get_dashboard: action, isLoading: false };\n//       },\n//     },\n// });\n\n// export default AuthSlice;\n\nconst initialState = {\n  isLoading: false,\n  isError: false,\n  auth_Info: [],\n  status: false\n};\nconst loginReducer = createReducer(initialState, builder => {\n  builder.addCase(Login.pending, (state, action) => {\n    // Handle pending action\n    // state.isLoading = true;\n    return {\n      ...state,\n      auth_Info: action.payload,\n      isLoading: true\n    };\n  }).addCase(Login.fulfilled, (state, action) => {\n    // Handle fulfilled action\n    return {\n      ...state,\n      auth_Info: action.payload,\n      isLoading: false\n    };\n  }).addCase(Login.rejected, (state, action) => {\n    // state.isLoading = false;\n    return {\n      ...state,\n      auth_Info: action.payload,\n      isLoading: false\n    };\n  });\n});\nexport default loginReducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","LOGIN","Login","data","user_id","token","res","_id","err","initialState","isLoading","isError","auth_Info","status","loginReducer","createReducer","builder","addCase","pending","state","action","payload","fulfilled","rejected"],"sources":["D:/Gaming/gaming/frontend/src/Components/Redux/Slice/Auth/auth.slice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// // import { DispatchLogin } from \"../../../Layout/Auth/Login\";\r\nimport { LOGIN } from \"../../../Service/auth.service\";\r\n\r\nexport const Login = createAsyncThunk(\"auth/login\", async (data) => {\r\n  const { user_id, token } = data;\r\n\r\n  try {\r\n    const res = await LOGIN({ _id: user_id }, token);\r\n    return await res;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n});\r\n\r\n// const AuthSlice = createSlice({\r\n//   name: \"AuthSlice\",\r\n//   initialState: {\r\n//     isLoading: false,\r\n//     isError: false,\r\n//     helps: [],\r\n//     status: false,\r\n//   },\r\n\r\n//   recuders: {},\r\n//     extraReducers: {\r\n//       [Login.pending]: (state, { payload }) => {\r\n//         // state.isLoading = false;\r\n//         // return { ...state, get_dashboard: [], isLoading: true };\r\n//       },\r\n//       [Login.fulfilled]: (state, { payload }) => {\r\n//         // state.isLoading = false;\r\n//         return { ...state, helps: payload, isLoading: false };\r\n//       },\r\n//       [Login.rejected]: (state, action) => {\r\n//         // return { ...state, get_dashboard: action, isLoading: false };\r\n//       },\r\n//     },\r\n// });\r\n\r\n// export default AuthSlice;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isError: false,\r\n  auth_Info: [],\r\n  status: false,\r\n};\r\n\r\nconst loginReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(Login.pending, (state, action) => {\r\n      // Handle pending action\r\n      // state.isLoading = true;\r\n      return { ...state, auth_Info: action.payload, isLoading: true };\r\n    })\r\n    .addCase(Login.fulfilled, (state, action) => {\r\n      // Handle fulfilled action\r\n      return { ...state, auth_Info: action.payload, isLoading: false };\r\n    })\r\n    .addCase(Login.rejected, (state, action) => {\r\n      // state.isLoading = false;\r\n      return { ...state, auth_Info: action.payload, isLoading: false };\r\n    });\r\n});\r\n\r\nexport default loginReducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;AACA,SAASC,KAAK,QAAQ,+BAA+B;AAErD,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,CAAC,YAAY,EAAE,MAAOG,IAAI,IAAK;EAClE,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGF,IAAI;EAE/B,IAAI;IACF,MAAMG,GAAG,GAAG,MAAML,KAAK,CAAC;MAAEM,GAAG,EAAEH;IAAQ,CAAC,EAAEC,KAAK,CAAC;IAChD,OAAO,MAAMC,GAAG;EAClB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,OAAOA,GAAG;EACZ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAGC,aAAa,CAACN,YAAY,EAAGO,OAAO,IAAK;EAC5DA,OAAO,CACJC,OAAO,CAACf,KAAK,CAACgB,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACzC;IACA;IACA,OAAO;MAAE,GAAGD,KAAK;MAAEP,SAAS,EAAEQ,MAAM,CAACC,OAAO;MAAEX,SAAS,EAAE;IAAK,CAAC;EACjE,CAAC,CAAC,CACDO,OAAO,CAACf,KAAK,CAACoB,SAAS,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;IAC3C;IACA,OAAO;MAAE,GAAGD,KAAK;MAAEP,SAAS,EAAEQ,MAAM,CAACC,OAAO;MAAEX,SAAS,EAAE;IAAM,CAAC;EAClE,CAAC,CAAC,CACDO,OAAO,CAACf,KAAK,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;IAC1C;IACA,OAAO;MAAE,GAAGD,KAAK;MAAEP,SAAS,EAAEQ,MAAM,CAACC,OAAO;MAAEX,SAAS,EAAE;IAAM,CAAC;EAClE,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,eAAeI,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}