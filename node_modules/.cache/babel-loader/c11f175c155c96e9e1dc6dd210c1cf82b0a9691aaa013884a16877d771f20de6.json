{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { AllMatchesApi, MatchListApi, SeriesListApi, UserProfileGetApi } from \"../../../Service/user.service\";\nimport { useNavigate } from \"react-router-dom\";\nexport const getUserProfile = createAsyncThunk(\"User/getUserProfile\", async data => {\n  try {\n    let {\n      id,\n      token\n    } = data;\n    const res = await UserProfileGetApi(id, token);\n    return await res;\n  } catch (error) {}\n});\nexport const getAllMatches = createAsyncThunk(\"user/getAllMatches\", async token => {\n  try {\n    const res = await AllMatchesApi(token);\n    return await res;\n  } catch (error) {\n    return error;\n  }\n});\nexport const getMatchList = createAsyncThunk(\"user/getMatchList\", async data => {\n  console.log(data, \"check data in matchlist\");\n  try {\n    // const res = await MatchListApi(data)\n    // return await res\n  } catch (error) {\n    return error;\n  }\n});\nexport const getSeriesList = _s(createAsyncThunk(\"user/getSeriesList\", _s(async token => {\n  _s();\n  console.log(object);\n  const navigate = useNavigate();\n  try {\n    const res = await SeriesListApi(token);\n    console.log(\"res\", res);\n    return res;\n  } catch (error) {\n    console.log(\"error\", error);\n    if (error.response && error.response.status === 500) {\n      navigate(\"/login\"); // Replace '/error500' with your desired route\n    }\n    throw error; // Rethrow the error to let Redux Toolkit know that the action has failed\n  }\n}, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n})), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\nconst UserSlice = createSlice({\n  name: \"UserSlice\",\n  initialState: {\n    getUserProfileState: {},\n    getAllMatchListState: [],\n    getMatchListState: [],\n    getSeriesListState: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getUserProfile.fulfilled, (state, action) => {\n      state.getUserProfileState = action.payload;\n    });\n    builder.addCase(getAllMatches.fulfilled, (state, action) => {\n      state.getAllMatchListState = action.payload;\n    });\n    builder.addCase(getMatchList.fulfilled, (state, action) => {\n      state.getMatchListState = action.payload;\n    });\n    builder.addCase(getSeriesList.fulfilled, (state, action) => {\n      state.getSeriesListState = action.payload;\n    });\n  }\n});\nexport default UserSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","AllMatchesApi","MatchListApi","SeriesListApi","UserProfileGetApi","useNavigate","getUserProfile","data","id","token","res","error","getAllMatches","getMatchList","console","log","getSeriesList","_s","object","navigate","response","status","UserSlice","name","initialState","getUserProfileState","getAllMatchListState","getMatchListState","getSeriesListState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload"],"sources":["D:/Gaming/gaming/frontend/src/Components/Redux/Slice/User/user.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  AllMatchesApi,\r\n  MatchListApi,\r\n  SeriesListApi,\r\n  UserProfileGetApi,\r\n} from \"../../../Service/user.service\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const getUserProfile = createAsyncThunk(\r\n  \"User/getUserProfile\",\r\n  async (data) => {\r\n    try {\r\n      let { id, token } = data;\r\n      const res = await UserProfileGetApi(id, token);\r\n      return await res;\r\n    } catch (error) {}\r\n  }\r\n);\r\n\r\nexport const getAllMatches = createAsyncThunk(\r\n  \"user/getAllMatches\",\r\n  async (token) => {\r\n    try {\r\n      const res = await AllMatchesApi(token);\r\n\r\n      return await res;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getMatchList = createAsyncThunk(\r\n  \"user/getMatchList\",\r\n  async (data) => {\r\n    console.log(data, \"check data in matchlist\");\r\n    try {\r\n      // const res = await MatchListApi(data)\r\n      // return await res\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getSeriesList = createAsyncThunk(\r\n  \"user/getSeriesList\",\r\n  async (token) => {\r\n    console.log(object)\r\n    const navigate = useNavigate();\r\n\r\n    try {\r\n      const res = await SeriesListApi(token);\r\n\r\n      console.log(\"res\", res);\r\n\r\n      return res;\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n\r\n      if (error.response && error.response.status === 500) {\r\n        navigate(\"/login\"); // Replace '/error500' with your desired route\r\n      }\r\n\r\n      throw error; // Rethrow the error to let Redux Toolkit know that the action has failed\r\n    }\r\n  }\r\n);\r\n\r\nconst UserSlice = createSlice({\r\n  name: \"UserSlice\",\r\n  initialState: {\r\n    getUserProfileState: {},\r\n    getAllMatchListState: [],\r\n    getMatchListState: [],\r\n    getSeriesListState: [],\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getUserProfile.fulfilled, (state, action) => {\r\n      state.getUserProfileState = action.payload;\r\n    });\r\n    builder.addCase(getAllMatches.fulfilled, (state, action) => {\r\n      state.getAllMatchListState = action.payload;\r\n    });\r\n    builder.addCase(getMatchList.fulfilled, (state, action) => {\r\n      state.getMatchListState = action.payload;\r\n    });\r\n    builder.addCase(getSeriesList.fulfilled, (state, action) => {\r\n      state.getSeriesListState = action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport default UserSlice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}