{"ast":null,"code":"var _jsxFileName = \"D:\\\\Gaming\\\\gaming\\\\frontend\\\\src\\\\Components\\\\Pages\\\\Users\\\\Layout\\\\Pages\\\\userprofile\\\\UserChangePassword.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Formikform from \"../../../../../Helpers/Form\";\nimport * as valid_err from \"../../../../../Utils/Common_Msg\";\nimport { useFormik } from \"formik\";\nimport ToastButton from \"../../../../../Helpers/Toast\";\nimport { ChangePasswordApi } from \"../../../../../Service/admin.service\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserChangePassword = () => {\n  _s();\n  const token = localStorage.getItem(\"token\");\n  const user_details = JSON.parse(localStorage.getItem(\"user_details\"));\n  const formik = useFormik({\n    initialValues: {\n      old_password: \"\",\n      new_password: \"\",\n      confirm_password: \"\"\n    },\n    validate: values => {\n      const errors = {};\n      if (!values.old_password) {\n        errors.old_password = valid_err.OLD_PASSWORD_ERROR;\n      }\n      if (!values.new_password) {\n        errors.new_password = valid_err.NEW_PASSWORD_ERROR;\n      }\n      if (!values.confirm_password) {\n        errors.confirm_password = valid_err.CONFIRM_PASSWORD_ERROR;\n      } else if (values.confirm_password !== values.new_password) {\n        errors.confirm_password = valid_err.CONFIRM_AND_NEW_PASSWORD_ERROR;\n      }\n      return errors;\n    },\n    onSubmit: async (values, {\n      resetForm\n    }) => {\n      try {\n        const data = {\n          user_id: user_details === null || user_details === void 0 ? void 0 : user_details.id,\n          old_password: values.old_password,\n          new_password: values.new_password\n        };\n        const response = await ChangePasswordApi(data, token);\n        if ((response === null || response === void 0 ? void 0 : response.status) == 200) {\n          var _response$data;\n          toast.success(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.msg);\n          resetForm();\n        } else if (response.response.data.statusCode === 400) {\n          toast.error(response.response.data.msg);\n        }\n      } catch (error) {\n        toast.error(error.message);\n      }\n    }\n  });\n  const fields = [{\n    name: \"old_password\",\n    label: \"Old Password\",\n    type: \"password\",\n    label_size: 12,\n    col_size: 12\n  }, {\n    name: \"new_password\",\n    label: \"New Password\",\n    type: \"password\",\n    label_size: 12,\n    col_size: 12\n  }, {\n    name: \"confirm_password\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    label_size: 12,\n    col_size: 12\n  }];\n  return /*#__PURE__*/_jsxDEV(\"app-change-password\", {\n    \"_ngcontent-aja-c61\": \"\",\n    \"_nghost-aja-c53\": \"\",\n    children: [/*#__PURE__*/_jsxDEV(Formikform, {\n      fieldtype: fields.filter(field => !field.showWhen),\n      formik: formik,\n      btn_name: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(UserChangePassword, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = UserChangePassword;\nexport default UserChangePassword;\nvar _c;\n$RefreshReg$(_c, \"UserChangePassword\");","map":{"version":3,"names":["React","Formikform","valid_err","useFormik","ToastButton","ChangePasswordApi","toast","jsxDEV","_jsxDEV","UserChangePassword","_s","token","localStorage","getItem","user_details","JSON","parse","formik","initialValues","old_password","new_password","confirm_password","validate","values","errors","OLD_PASSWORD_ERROR","NEW_PASSWORD_ERROR","CONFIRM_PASSWORD_ERROR","CONFIRM_AND_NEW_PASSWORD_ERROR","onSubmit","resetForm","data","user_id","id","response","status","_response$data","success","msg","statusCode","error","message","fields","name","label","type","label_size","col_size","children","fieldtype","filter","field","showWhen","btn_name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Gaming/gaming/frontend/src/Components/Pages/Users/Layout/Pages/userprofile/UserChangePassword.js"],"sourcesContent":["import React from \"react\";\r\nimport Formikform from \"../../../../../Helpers/Form\";\r\nimport * as valid_err from \"../../../../../Utils/Common_Msg\";\r\nimport { useFormik } from \"formik\";\r\nimport ToastButton from \"../../../../../Helpers/Toast\";\r\nimport { ChangePasswordApi } from \"../../../../../Service/admin.service\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst UserChangePassword = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_details = JSON.parse(localStorage.getItem(\"user_details\"))\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      old_password: \"\",\r\n      new_password: \"\",\r\n      confirm_password: \"\",\r\n    },\r\n\r\n    validate: (values) => {\r\n      const errors = {};\r\n\r\n      if (!values.old_password) {\r\n        errors.old_password = valid_err.OLD_PASSWORD_ERROR;\r\n      }\r\n\r\n      if (!values.new_password) {\r\n        errors.new_password = valid_err.NEW_PASSWORD_ERROR;\r\n      }\r\n\r\n      if (!values.confirm_password) {\r\n        errors.confirm_password = valid_err.CONFIRM_PASSWORD_ERROR;\r\n      } else if (values.confirm_password !== values.new_password) {\r\n        errors.confirm_password = valid_err.CONFIRM_AND_NEW_PASSWORD_ERROR;\r\n      }\r\n\r\n      return errors;\r\n    },\r\n    onSubmit: async (values, { resetForm }) => {\r\n      try {\r\n        const data = {\r\n          user_id: user_details?.id,\r\n          old_password: values.old_password,\r\n          new_password: values.new_password,\r\n        };\r\n\r\n        const response = await ChangePasswordApi(data, token);\r\n  \r\n\r\n        if (response?.status == 200) {\r\n          toast.success(response?.data?.msg);\r\n          resetForm()\r\n        }\r\n        else if(response.response.data.statusCode === 400){\r\n          toast.error(response.response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        toast.error(error.message);\r\n\r\n      }\r\n    },\r\n  });\r\n\r\n  const fields = [\r\n    {\r\n      name: \"old_password\",\r\n      label: \"Old Password\",\r\n      type: \"password\",\r\n      label_size: 12,\r\n      col_size: 12,\r\n    },\r\n    {\r\n      name: \"new_password\",\r\n      label: \"New Password\",\r\n      type: \"password\",\r\n      label_size: 12,\r\n      col_size: 12,\r\n    },\r\n    {\r\n      name: \"confirm_password\",\r\n      label: \"Confirm Password\",\r\n      type: \"password\",\r\n      label_size: 12,\r\n      col_size: 12,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <app-change-password\r\n      _ngcontent-aja-c61=\"\"\r\n      _nghost-aja-c53=\"\"\r\n    >\r\n  \r\n      <Formikform\r\n        fieldtype={fields.filter((field) => !field.showWhen)}\r\n        formik={formik}\r\n        btn_name=\"Update\"\r\n      />\r\n      <ToastButton />\r\n    </app-change-password>\r\n  )\r\n}\r\n\r\nexport default UserChangePassword"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}