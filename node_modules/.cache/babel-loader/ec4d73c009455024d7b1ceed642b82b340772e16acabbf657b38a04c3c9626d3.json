{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// // import { DispatchLogin } from \"../../../Layout/Auth/Login\";\nimport { LOGIN } from \"../../../Service/auth.service\";\n\n// export const Login = createAsyncThunk(\"auth/login\", async (data) => {\n//   const { user_id, token } = data;\n\n//   try {\n//     const res = await LOGIN({ _id: user_id }, token);\n//     return await res;\n//   } catch (err) {\n//     return err;\n//   }\n// });\n\n// const AuthSlice = createSlice({\n//   name: \"AuthSlice\",\n//   initialState: {\n//     isLoading: false,\n//     isError: false,\n//     helps: [],\n//     status: false,\n//   },\n\n//   recuders: {},\n//     extraReducers: {\n//       [Login.pending]: (state, { payload }) => {\n//         // state.isLoading = false;\n//         // return { ...state, get_dashboard: [], isLoading: true };\n//       },\n//       [Login.fulfilled]: (state, { payload }) => {\n//         // state.isLoading = false;\n//         return { ...state, helps: payload, isLoading: false };\n//       },\n//       [Login.rejected]: (state, action) => {\n//         // return { ...state, get_dashboard: action, isLoading: false };\n//       },\n//     },\n// });\n\n// export default AuthSlice;\n\nimport { Login } from './actions';\nconst initialState = {\n  helps: [],\n  isLoading: false\n};\nconst loginReducer = createReducer(initialState, builder => {\n  builder.addCase(Login.pending, (state, action) => {\n    // Handle pending action\n    state.isLoading = true;\n  }).addCase(Login.fulfilled, (state, action) => {\n    // Handle fulfilled action\n    state.helps = action.payload;\n    state.isLoading = false;\n  }).addCase(Login.rejected, (state, action) => {\n    // Handle rejected action\n    state.isLoading = false;\n    // Handle error state if needed\n  });\n});\nexport default loginReducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","LOGIN","Login","initialState","helps","isLoading","loginReducer","createReducer","builder","addCase","pending","state","action","fulfilled","payload","rejected"],"sources":["D:/Gaming/gaming/frontend/src/Components/Redux/Slice/Auth/auth.slice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// // import { DispatchLogin } from \"../../../Layout/Auth/Login\";\r\nimport { LOGIN } from \"../../../Service/auth.service\";\r\n\r\n// export const Login = createAsyncThunk(\"auth/login\", async (data) => {\r\n//   const { user_id, token } = data;\r\n\r\n//   try {\r\n//     const res = await LOGIN({ _id: user_id }, token);\r\n//     return await res;\r\n//   } catch (err) {\r\n//     return err;\r\n//   }\r\n// });\r\n\r\n// const AuthSlice = createSlice({\r\n//   name: \"AuthSlice\",\r\n//   initialState: {\r\n//     isLoading: false,\r\n//     isError: false,\r\n//     helps: [],\r\n//     status: false,\r\n//   },\r\n\r\n//   recuders: {},\r\n//     extraReducers: {\r\n//       [Login.pending]: (state, { payload }) => {\r\n//         // state.isLoading = false;\r\n//         // return { ...state, get_dashboard: [], isLoading: true };\r\n//       },\r\n//       [Login.fulfilled]: (state, { payload }) => {\r\n//         // state.isLoading = false;\r\n//         return { ...state, helps: payload, isLoading: false };\r\n//       },\r\n//       [Login.rejected]: (state, action) => {\r\n//         // return { ...state, get_dashboard: action, isLoading: false };\r\n//       },\r\n//     },\r\n// });\r\n\r\n// export default AuthSlice;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Login } from './actions'; \r\n\r\nconst initialState = {\r\n  helps: [],\r\n  isLoading: false,\r\n};\r\n\r\nconst loginReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(Login.pending, (state, action) => {\r\n      // Handle pending action\r\n      state.isLoading = true;\r\n    })\r\n    .addCase(Login.fulfilled, (state, action) => {\r\n      // Handle fulfilled action\r\n      state.helps = action.payload;\r\n      state.isLoading = false;\r\n    })\r\n    .addCase(Login.rejected, (state, action) => {\r\n      // Handle rejected action\r\n      state.isLoading = false;\r\n      // Handle error state if needed\r\n    });\r\n});\r\n\r\nexport default loginReducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;AACA,SAASC,KAAK,QAAQ,+BAA+B;;AAErD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,SAASC,KAAK,QAAQ,WAAW;AAEjC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAGC,aAAa,CAACJ,YAAY,EAAGK,OAAO,IAAK;EAC5DA,OAAO,CACJC,OAAO,CAACP,KAAK,CAACQ,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACzC;IACAD,KAAK,CAACN,SAAS,GAAG,IAAI;EACxB,CAAC,CAAC,CACDI,OAAO,CAACP,KAAK,CAACW,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;IAC3C;IACAD,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACE,OAAO;IAC5BH,KAAK,CAACN,SAAS,GAAG,KAAK;EACzB,CAAC,CAAC,CACDI,OAAO,CAACP,KAAK,CAACa,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;IAC1C;IACAD,KAAK,CAACN,SAAS,GAAG,KAAK;IACvB;EACF,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}